module Main exposing (main)

import Bytes exposing (Bytes) 
import Bytes.Decode as Decode
import FileSystem exposing (ReadableFileHandle)
import Init
import Msg exposing (FileError(..), Msg(..))
import Node exposing (Environment)
import Prettynice
import Prettynice.Response as Response exposing (Body(..), Response)
import Task exposing (Task)


type alias Model =
    { fsPermission : FileSystem.Permission }


main : Prettynice.Program Model
main =
    Prettynice.defineProgram
        { init = init
        , update = update
        , subscriptions = (\_ -> Sub.none)
        , onRequest = GotRequest
        }


init : Environment -> Prettynice.Init Model
init env =
    Init.await FileSystem.initialize <| \fsPermission ->
        Prettynice.startProgram
            { host = "0.0.0.0"
            , port_ = 3000
            , env = env
            , model = 
                { fsPermission = fsPermission }
            }


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotRequest request response ->
            { model = model
            , command =
                open model.fsPermission "./test.txt"
                    |> Task.andThen read
                    |> Task.andThen decode
                    |> Task.attempt (GotReadResult response)
            }

        GotReadResult response (Ok fileContents) ->
            { model = model
            , command =
                response
                    |> Response.sendText
                        ("File contents: " ++ fileContents)
            }

        GotReadResult response (Err e) ->
            { model = model
            , command =
                response
                    |> Response.setStatus 500
                    |> Response.sendText
                        ("Failed to read file: " ++ Debug.toString e)
            }


open : FileSystem.Permission -> String -> Task FileError (ReadableFileHandle Never)
open fsPermission fname =
    FileSystem.openForRead fsPermission fname
        |> Task.mapError OpenError


read : ReadableFileHandle a -> Task FileError Bytes
read file =
    FileSystem.read file
        |> Task.mapError ReadError


decode : Bytes -> Task FileError String
decode bytes =
    case Decode.decode (Decode.string (Bytes.width bytes)) bytes of
        Just string ->
            Task.succeed string

        Nothing ->
            Task.fail DecodeError
