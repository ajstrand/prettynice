module Main exposing (main)

import Msg exposing (Msg(..))
import Node exposing (Environment)
import Prettynice
import Prettynice.Response as Response exposing (Response)
import Transmutable.Html as H exposing (Html)
import Transmutable.Html.Attributes as A


main : Prettynice.Program {}
main =
    Prettynice.defineProgram
        { init = init
        , update = update
        , subscriptions = (\_ -> Sub.none)
        , onRequest = GotRequest
        }


init : Environment -> Prettynice.Init {}
init env =
    Prettynice.startProgram
        { host = "0.0.0.0"
        , port_ = 3000
        , env = env
        , model = {}
        }


update : Msg -> {} -> { model : {}, command : Cmd Msg }
update msg model =
    case msg of
        GotRequest request response ->
            { model = model
            , command = 

                --
                -- Prettynice wraps HttpServer's request to add a .path that's
                -- split into parts for easier pattern matching. But you can
                -- also match on anything else in the request (e.g. .method).
                --

                case request.path of
                    [] ->
                        home response

                    [ "hello", name ] ->
                        sayHello name response

                    _ ->
                        notFound request.url.path response
            }

        -- TODO: remove the need for this (see the mapping below)
        NoOp ->
            { model = model
            , command = Cmd.none
            }


home : Response -> Cmd Msg
home =
    Response.sendHtml
        { title = "Welcome!"
        , body = view <|
            H.main_ []
                [ H.h1 [] [ H.text "Welcome!" ]
                , H.p [] [ H.a [ A.href "/hello/World" ] [ H.text "Say hello." ] ]
                , H.p [] [ H.a [ A.href "/notfound" ] [ H.text "See a 404." ] ]
                ]
        }


sayHello : String -> Response -> Cmd Msg
sayHello name =
    Response.sendHtml
        { title = "Hello!"
        , body = view <| H.text ("Hello, " ++ name ++ "!")
        }


notFound : String -> Response -> Cmd Msg
notFound path response =
    response
        |> Response.setStatus 404
        |> Response.sendText ("Can't find " ++ path)


-- TODO: remove the need for this
view : Html {} -> Html Msg
view html =
    H.map (\_ -> NoOp) html
