port module Main exposing (main)

import Node exposing (Environment)
import Prettynice
import Prettynice.Request exposing (Request)
import Prettynice.Response as Response exposing (Response)
import Transmutable.Html as H exposing (Html)


type alias Model =
    { users : Array User
    }


type alias User =
    { id : Int
    , name : String
    }


main : Prettynice.Program Model Msg
main =
    Prettynice.defineProgram
        { init = init
        , update = update
        , subscriptions = subscriptions
        , onRequest = GotRequest
        }


init : Environment -> Prettynice.Init Model Msg
init env =
    Prettynice.startProgram
        { host = "0.0.0.0"
        , port_ = 3000
        , env = env
        , model = { users = [] }
        }


type Msg
    = GotRequest Request Response
    | GotUsers (Array User)


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotRequest request response ->
            { model = model
            , command = 
                response
                    |> Response.sendHtml
                        { title = "User List"
                        , head = []
                        , body = viewUsers model.users
                        }
            }

        GotUsers users_ ->
            { model = { model | users = users_ }
            , command = Cmd.none
            }


port users : (Array User -> msg) -> Sub msg


subscriptions : Model -> Sub Msg
subscriptions model =
    users GotUsers


viewUsers : Array User -> Array (Html Msg)
viewUsers users_ =
    users_
        |> Array.map
            ( \user ->
                H.div [] [ H.text (String.fromInt user.id ++ " | " ++ user.name) ]
            )
