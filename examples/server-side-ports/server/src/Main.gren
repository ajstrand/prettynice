port module Main exposing (main)

import Node exposing (Environment)
import Prettynice
import Prettynice.Request exposing (Request)
import Prettynice.Response as Response exposing (Response)
import Random


type alias Model =
    { response : Maybe Response
    }


main : Prettynice.Program Model Msg
main =
    Prettynice.defineProgram
        { init = init
        , update = update
        , subscriptions = subscriptions
        , onRequest = GotRequest
        }


init : Environment -> Prettynice.Init Model Msg
init env =
    Prettynice.startProgram
        { host = "0.0.0.0"
        , port_ = 3000
        , env = env
        , model = { response = Nothing }
        }


type Msg
    = GotRequest Request Response
    | GotUuid Response String


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        GotRequest request response ->
            { model = { model | response = Just response }
            , command = getUuid {}
            }

        GotUuid response uuid ->
            { model = { model | response = Nothing }
            , command = Response.sendText uuid response
            }


port getUuid : {} -> Cmd msg
port receiveUuid : (String -> msg) -> Sub msg


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.response of
        Just response ->
            receiveUuid <| GotUuid response

        Nothing ->
            Sub.none
