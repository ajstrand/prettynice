module Main exposing (main)

import Bytes exposing (Bytes)
import Bytes.Decode
import ChildProcess
import CodeGen
import FileSystem
import Init
import Node
import Stream exposing (Stream)
import Task exposing (Task)


main : Node.Program Model Msg
main =
    Node.defineProgram 
        { init = init
        , update = update
        , subscriptions = (\_ -> Sub.none)
        }


-- MODEL


type alias Model =
    { fsPermission : FileSystem.Permission
    , procPermission : ChildProcess.Permission
    , stdout : Stream
    , stderr : Stream
    }


init : Node.Environment -> Init.Task { model : Model, command : Cmd Msg }
init env =
    Init.await FileSystem.initialize <| \fsPermission ->
        Init.await ChildProcess.initialize <| \procPermission ->
            Node.startProgram
                { model =
                    { fsPermission = fsPermission
                    , procPermission = procPermission
                    , stdout = env.stdout
                    , stderr = env.stderr
                    }
                , command = 
                    Cmd.batch
                        [ progress env.stdout "Cleaning up previous builds"
                        , clean fsPermission |> Task.attempt Cleaned
                        ]
                }


-- UPDATE


type Msg
    = Cleaned (Result FileSystem.AccessError {})
    | GeneratedDependencies (Result CodeGen.Error CodeGen.Result)
    | GeneratedServerComponents (Result CodeGen.Error CodeGen.Result)
    | GeneratedClientComponents (Result CodeGen.Error CodeGen.Result)
    | GeneratedServerPorts (Result CodeGen.Error CodeGen.Result)
    | GeneratedClientPorts (Result CodeGen.Error CodeGen.Result)
    | CopiedPublicAssets (Result CodeGen.Error CodeGen.Result)
    | BuiltClientComponents (Result ComponentBuildError ComponentBuildSuccess)
    | BuiltServer (Result ChildProcess.FailedRun ChildProcess.SuccessfulRun)


type ComponentBuildError
    = ComponentBuildFailed ChildProcess.FailedRun
    | ListComponentsFailed String


type ComponentBuildSuccess
    = ComponentBuildSucceeded ChildProcess.SuccessfulRun
    | NoComponents


update : Msg -> Model -> { model : Model, command : Cmd Msg }
update msg model =
    case msg of
        Cleaned result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating prettynice dependencies"
                            , CodeGen.genDependencies model.fsPermission
                                |> Task.attempt GeneratedDependencies
                            ]

                    Err e ->
                        fileSystemError model.stderr e
            }
                        
        GeneratedDependencies result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating server components"
                            , CodeGen.genServerComponents model.fsPermission
                                |> Task.attempt GeneratedServerComponents
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedServerComponents result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating client components"
                            , Task.attempt GeneratedClientComponents <|
                                CodeGen.genClientComponents model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedClientComponents result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating server ports"
                            , Task.attempt GeneratedServerPorts <|
                                CodeGen.genServerPorts model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedServerPorts result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Generating client ports"
                            , Task.attempt GeneratedClientPorts <|
                                CodeGen.genClientPorts model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        GeneratedClientPorts result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Copying public assets"
                            , Task.attempt CopiedPublicAssets <|
                                CodeGen.copyPublicAssets model.fsPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        CopiedPublicAssets result ->
            { model = model
            , command =
                case result of
                    Ok _ ->
                        Cmd.batch
                            [ progress model.stdout "Building client components"
                            , Task.attempt BuiltClientComponents <|
                                buildClientComponents model.fsPermission model.procPermission
                            ]

                    Err e ->
                        codeGenError model.stderr e
            }

        BuiltClientComponents result ->
            { model = model
            , command =
                case result of
                    Ok success ->
                        Cmd.batch
                            [ case success of
                                NoComponents ->
                                    Stream.sendLine model.stdout "No components to build"
                                ComponentBuildSucceeded s ->
                                    Stream.send model.stdout s.stdout
                            , progress model.stdout "Building server"
                            , Task.attempt BuiltServer <|
                                buildServer model.procPermission
                            ]

                    Err (ComponentBuildFailed failure) ->
                        failure.stderr
                            |> bytesToString
                            |> Maybe.withDefault "Unknown error building client components"
                            |> endWithErrorMessage model.stderr

                    Err (ListComponentsFailed message) ->
                        endWithErrorMessage model.stderr message
            }

        BuiltServer result ->
            { model = model
            , command =
                case result of
                    Ok success ->
                        Cmd.batch
                            [ Stream.send model.stdout success.stdout
                            , Stream.sendLine model.stdout "âœ… Done"
                            ]

                    Err error ->
                        error.stderr
                            |> bytesToString
                            |> Maybe.withDefault "Unknown error building server"
                            |> endWithErrorMessage model.stderr
            }


clean : FileSystem.Permission -> Task FileSystem.AccessError {}
clean fsPermission =
    let
        remove path =
            FileSystem.remove
                fsPermission
                (FileSystem.buildPath path)
                { recursive = True, ignoreErrors = True }

        create path =
            FileSystem.makeDirectory
                fsPermission
                (FileSystem.buildPath path)
                { recursive = True }

        recreate path =
            remove path
                |> Task.andThen (\_ -> create path)
    in
    [ [ "dist" ]
    , [ "client", ".prettynice" ]
    , [ "server", ".prettynice" ]
    ]
        |> Array.map recreate
        |> Task.sequence
        |> Task.map (\_ -> {})


buildClientComponents : FileSystem.Permission -> ChildProcess.Permission -> Task ComponentBuildError ComponentBuildSuccess
buildClientComponents fsPermission procPermission =
    let
        workingDirectory =
            FileSystem.buildPath [ "client" ]

        outputPath =
            FileSystem.buildPath [ "..", "dist", "client", "main.js" ]

        buildComponents components =
            if components == "" then
                Task.succeed NoComponents
            else
                ChildProcess.run procPermission "gren" 
                    [ "make", components, "--output=" ++ outputPath ]
                    { ChildProcess.defaultRunOptions 
                        | workingDirectory = 
                            ChildProcess.SetWorkingDirectory workingDirectory
                    }
                    |> Task.map ComponentBuildSucceeded
                    |> Task.mapError ComponentBuildFailed
    in
    CodeGen.generatedComponentPaths fsPermission
        |> Task.mapError (CodeGen.errorString >> ListComponentsFailed)
        |> Task.map (String.join " ")
        |> Task.andThen buildComponents


buildServer : ChildProcess.Permission -> Task ChildProcess.FailedRun ChildProcess.SuccessfulRun
buildServer procPermission =
    let
        workingDirectory =
            FileSystem.buildPath [ "server" ]

        inputPath =
            FileSystem.buildPath [ "src", "Main.gren" ]

        outputPath =
            FileSystem.buildPath [ "..", "dist", "server", "main.js" ]
    in
    ChildProcess.run procPermission "gren" 
        [ "make", inputPath, "--output=" ++ outputPath ]
        { ChildProcess.defaultRunOptions 
            | workingDirectory = 
                ChildProcess.SetWorkingDirectory workingDirectory
        }


codeGenError : Stream -> CodeGen.Error -> Cmd Msg
codeGenError stream error =
    endWithErrorMessage stream (CodeGen.errorString error)


fileSystemError : Stream -> FileSystem.AccessError -> Cmd Msg
fileSystemError stream error =
    endWithErrorMessage stream <|
        case error of
            FileSystem.AccessErrorNotFound ->
                "File not found"

            FileSystem.AccessErrorNoAccess ->
                "Cannot access file"

            FileSystem.AccessErrorNotADirectory ->
                "Path is not a directory"

            FileSystem.AccessErrorUnknown str ->
                "File system error: " ++ str


endWithErrorMessage : Stream -> String -> Cmd Msg
endWithErrorMessage stream message =
    Cmd.batch
        [ Stream.sendLine stream ("ðŸš¨ " ++ message ++ "\n")
        , Node.setExitCode 1
        ]


progress : Stream -> String -> Cmd Msg
progress stream message =
    Stream.sendLine stream ("ðŸŒ¸ " ++ message ++ "...")


bytesToString : Bytes -> Maybe String
bytesToString bytes =
    bytes
        |> Bytes.width
        |> Bytes.Decode.string
        |> (\decoder -> Bytes.Decode.decode decoder bytes)
