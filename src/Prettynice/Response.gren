module Prettynice.Response exposing 
    ( Response
    , Body(..)
    , new
    , send
    , sendText
    , sendHtml
    , sendJson
    , sendBytes
    , setBody
    , setHeader
    , setStatus
    ) 


import Bytes exposing (Bytes)
import HttpServer.Response as Http
import Prettynice.Request exposing (Request)
import Json.Encode
import Task exposing (Task)
import Transmutable.Html as H exposing (Html)
import Transmutable.Html.Attributes as A


type Response
    = Response Http.Response


type Body msg
    = HtmlBody 
        { title : String
        , head : Array (Html msg)
        , body : Array (Html msg)
        }
    | JsonBody Json.Encode.Value
    | TextBody String


new : Http.Response -> Response
new httpResponse =
    Response httpResponse


send : Response -> Cmd a
send response =
    response
        |> getHttpResponse
        |> Http.send


sendBytes : { contentType : String, body : Bytes } -> Response -> Cmd a
sendBytes { contentType, body } response =
    response
        |> getHttpResponse
        |> Http.setHeader "Content-type" contentType
        |> Http.setBodyAsBytes body
        |> Http.send


sendText : String -> Response -> Cmd a
sendText text response =
    response
        |> setBody (TextBody text)
        |> send


sendJson : Json.Encode.Value -> Response -> Cmd a
sendJson json response =
    response
        |> setBody (JsonBody json)
        |> send


sendHtml : 
    { title : String, head : Array (Html msg), body : Array (Html msg) } 
    -> Response 
    -> Cmd msg
sendHtml { title, head, body } response =
    response
        |> setBody (HtmlBody { title = title, head = head, body = body })
        |> send


setBody : Body msg -> Response -> Response
setBody bodyVariant response =
    let
        { contentType, rawBody } =
            case bodyVariant of
                HtmlBody { title, head, body } ->
                    { contentType = "text/html"
                    , rawBody =
                        ( H.toString H.doctype ) ++ 
                        ( H.toString
                            ( H.html [ A.lang "en" ]
                                [ H.head []
                                    ( [ H.meta [ A.charset "utf-8" ]
                                      , H.meta [ A.name "viewport", A.content "width=device-width, initial-scale=1.0" ]
                                      , H.node "script" [ A.src "/main.js" ] []
                                      , H.title [ H.text title ]
                                      ] ++ head
                                    )
                                , H.body [] body
                                , H.node "script" []
                                    [ H.text <|
                                        """
                                        if (typeof($__components) !== 'undefined') {
                                            Object.keys($__components).map((name) => {
                                                let path = name.replace(/\\./g, '/');
                                                import("/" + path + ".js").then((mod) => {
                                                    if (mod.init) {
                                                        $__components[name].map((comp) => {
                                                            mod.init(comp);
                                                        });
                                                    }
                                                });
                                            });
                                        }
                                        """
                                    ]
                                ]
                            )
                        )
                    }

                JsonBody json ->
                    { contentType = "application/json"
                    , rawBody = Json.Encode.encode 2 json
                    }

                TextBody text ->
                    { contentType = "text/plain"
                    , rawBody = text
                    }

    in
    response
        |> getHttpResponse
        |> Http.setHeader "Content-type" contentType
        |> Http.setBody rawBody
        |> new


setHeader : String -> String -> Response -> Response
setHeader key val (Response httpResponse) =
    httpResponse
        |> Http.setHeader key val
        |> Response
    

setStatus : Int -> Response -> Response
setStatus status (Response httpResponse) =
    httpResponse
        |> Http.setStatus status
        |> Response


getHttpResponse : Response -> Http.Response
getHttpResponse (Response httpResponse) =
    httpResponse
