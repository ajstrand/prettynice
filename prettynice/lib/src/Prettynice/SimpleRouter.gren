module Prettynice.SimpleRouter exposing 
 ( Program
 , Config
 , Init
 , defineProgram
 , startProgram
 )

import FileSystem
import HttpServer as Http exposing (ServerError(..), Method(..))
import HttpServer.Response as HttpResponse 
import Init
import Node exposing (Environment, Program)
import Prettynice.Request exposing (Request)
import Prettynice.Response exposing (Response)
import Server.Static as Static exposing (ReadFileError, Mode(..))
import Stream exposing (Stream)
import Task exposing (Task)
import Transmutable.Html as H
import Transmutable.Html.Attributes as A
import Url exposing (Url)


type alias Program =
    Node.Program Model Msg


type alias Init =
    Init.Task { model : Model, command : Cmd Msg }
 

type alias Model =
    { server : Maybe Http.Server
    , stdout : Stream
    , stderr : Stream
    , host : String
    , port_ : Int
    , env : Environment
    , fsPermission : FileSystem.Permission
    }


type alias Config =
    { host : String
    , port_ : Int
    , env : Environment
    }


defineProgram :
    { init : Environment -> Init
    , router : Request -> Response -> Cmd Msg
    } -> Program
defineProgram app =
    Node.defineProgram
        { init = app.init
        , update = update app.router
        , subscriptions = subscriptions
        }


startProgram : Config -> Init
startProgram config =
    Init.await Http.initialize <| \serverPermission ->
        Init.await FileSystem.initialize <| \fsPermission ->
            Node.startProgram
                { model =
                    { server = Nothing
                    , stdout = config.env.stdout
                    , stderr = config.env.stderr
                    , host = config.host
                    , port_ = config.port_
                    , env = config.env
                    , fsPermission = fsPermission
                    }
                , command =
                    Task.attempt CreateServerResult <|
                        Http.createServer serverPermission
                            { host = config.host
                            , port_ = config.port_
                            }
                }


type Msg
    = CreateServerResult (Result Http.ServerError Http.Server)
    | GotRequest Http.Request HttpResponse.Response
    | ResponseReady (Cmd Msg)


update : 
   (Request -> Response -> Cmd Msg)
    -> Msg
    -> Model
    -> { model : Model, command : Cmd Msg }
update router msg model =
    case msg of
        CreateServerResult result ->
            case result of
                Ok server ->
                    { model = { model | server = Just server }
                    , command = Stream.sendLine model.stdout <|
                        "Server started on http://" ++ model.host ++ ":" ++ String.fromInt model.port_
                    }
                Err (ServerError code message) ->
                    { model = model
                    , command = Stream.sendLine model.stderr <|
                        "Server failed to start: " ++ code ++ "\n" ++ message
                    }
        
        GotRequest req res ->
            let
                _ =
                    Debug.log "got request" req.url.path

                request = 
                    Prettynice.Request.new req

                response =
                    Prettynice.Response.new res

                appResponseTask =
                    Task.succeed <|
                        Cmd.batch
                            [ Stream.sendLine model.stdout <|
                                "Letting app respond to " ++ req.url.path
                            , router request response
                            ]

                tryStaticResponse =
                    Static.response
                        { fileSystemPermission = model.fsPermission
                        , httpResponse = res
                        , directory = "./dist/client"
                        , mode = Normal
                        }
                        req.url
                        |> Task.map 
                            (\staticResponse ->
                                Cmd.batch
                                    [ Stream.sendLine model.stdout <|
                                        "Responding with static file for " ++ req.url.path
                                    , HttpResponse.send staticResponse
                                    ]
                            )
            in
            { model = model
            , command = 
                    tryStaticResponse
                        |> Task.onError (\_ -> appResponseTask)
                        |> Task.perform ResponseReady
            }

        ResponseReady cmd ->
            { model = model
            , command = cmd
            }


-- SUBS


subscriptions : Model -> Sub Msg
subscriptions model =
    case model.server of
        Just server ->
            Http.onRequest server GotRequest

        Nothing ->
            Sub.none
