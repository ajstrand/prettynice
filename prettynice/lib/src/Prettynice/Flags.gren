module Prettynice.Flags exposing 
    ( FlagType(..)
    , typeName
    , encoderName
    , getType
    )

import Parser as P exposing ((|.), (|=), Trailing(..))
import Set


type FlagType
    = UnitType
    | IntType
    | StringType
    | Unknown


typeName : FlagType -> String
typeName flagType =
    case flagType of
        UnitType ->
            "{}"

        IntType ->
             "Int"

        StringType ->
            "String"
        
        Unknown ->
            "Unknown"


encoderName : FlagType -> String
encoderName flagType =
    case flagType of
        UnitType ->
            "null"  

        IntType ->
            "int"

        StringType ->
            "string"
        
        Unknown ->
            "unknown"


getType : String -> FlagType
getType content =
    let
        parser =
            P.succeed identity
                |. P.chompUntil "\ninit : "
                |. P.spaces
                |. P.keyword "init"
                |. P.spaces
                |. P.symbol ":"
                |. P.spaces
                |= P.oneOf
                    [ P.succeed UnitType |. P.keyword "{}"
                    , P.succeed IntType |. P.keyword "Int"
                    , P.succeed StringType |. P.keyword "String"
                    -- TODO: Bool, Float, Maybe, Array, and non-aliased Records
                    -- Maybe: type aliases and custom types.
                    -- Might want to wait for gren-in-gren compiler packages.
                    ]
                |. P.spaces
                |. P.keyword "->"
                |. P.spaces
                |. P.symbol "{"
                |. P.chompUntil "}"
                |. P.symbol "}"
                |. P.spaces
                |. P.keyword "init"
                |. P.spaces
                |. P.variable
                    { start = Char.isLower
                    , inner = \c -> Char.isAlphaNum c || c == '_'
                    , reserved = Set.empty
                    }
                |. P.spaces
                |. P.symbol "="
    in
    P.run parser content
        |> Result.withDefault Unknown
